{"version":3,"sources":["Main.js","Signin.js","GameMenu.js","App.js","serviceWorker.js","index.js"],"names":["Main","className","to","role","Login","buttonRef","useRef","emailFieldRef","passwordFieldRef","useState","email","setEmail","password","setPassword","htmlFor","ref","type","id","aria-describedby","onChange","evt","target","value","console","log","undefined","GameMenu","infoMenuExpand","setInfoMenuExpand","infoMenu","class","name","selected","checked","App","exact","path","Signin","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8b829196.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nfunction Main() {\n  return (\n    <div className=\"container h-100 d-flex justify-content-center align-items-start outbox\">\n      <div className=\"panel d-flex flex-column justify-content-center align-items-center\">\n        <h1>Dental Practice</h1>\n        <Link to=\"/signin\" role=\"button\" className=\"btn btn-primary btn-lg btn-round\">Start</Link>\n      </div>\n    </div>\n  );\n}\n\nexport default Main;\n","import React, { useState, useRef } from 'react';\nimport { Link } from 'react-router-dom';\n\nfunction Login() {\n  const buttonRef = useRef();\n  const emailFieldRef = useRef();\n  const passwordFieldRef = useRef();\n  const [email, setEmail] = useState();\n  const [password, setPassword] = useState();\n  const handleEmailFieldChange = (evt) => {\n    setEmail(evt.target.value);\n  };\n\n  const handlePasswordFieldChange = (evt) => {\n    setPassword(evt.target.value);\n    console.log(`password: ${password}`);\n  };\n\n  const isButtonShallDisable = () => {\n    console.log(`shall disable? ${email === undefined || email === \"\" || password === undefined || password === \"\"}`);\n    return email === undefined || email === \"\" || password === undefined || password === \"\";\n  };\n\n  return (\n    <div className=\"container h-100 d-flex justify-content-center align-items-start outbox\">\n      <form className=\"panel d-flex flex-column\">\n        <h1>Welcome Back</h1>\n        <div className=\"form-group\">\n          <label htmlFor=\"email\">Email address</label>\n          <input ref={emailFieldRef} type=\"email\" id=\"email\" className=\"form-control\" aria-describedby=\"emailHelp\" onChange={handleEmailFieldChange}/>\n          <small id=\"emailHelp\" className=\"form-text tex-muted\">We'll never share your email with anyone else</small>\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"password\">Password</label>\n          <input ref={passwordFieldRef} type=\"password\" id=\"password\" className=\"form-control\" aria-describedby=\"passwordHelp\" onChange={handlePasswordFieldChange}/>\n        </div>\n        <div className=\"form-group form-check\">\n          <input type=\"checkbox\" className=\"form-check-input\" id=\"check\"/>\n          <label htmlFor=\"check\" className=\"form-check-label\">Remember Me</label>\n        </div>\n        <Link to=\"/game-menu\" ref={buttonRef} role=\"button\" className={`btn btn-primary btn-lg btn-round align-self-start${isButtonShallDisable() ? \" disabled\" : \"\"}`}>Sign In</Link>\n      </form>\n    </div>\n  );\n}\n\nexport default Login;\n","import React, { useState, useRef } from 'react';\nimport { Link } from 'react-router-dom';\n\nfunction GameMenu() {\n    const [infoMenuExpand, setInfoMenuExpand] = useState(false);\n    const infoMenu = (\n        <>\n            <div className=\"form-group\">\n                <label htmlFor=\"gamer\">Name</label>\n                <input type=\"text\" id=\"gamer\" className=\"form-control\" />\n            </div>\n        </>\n    );\n\n    const handleExtraInfoCheckboxChange = (evt) => {\n        console.log(`checked? ${evt.target.checked}`);\n        setInfoMenuExpand(evt.target.checked);\n    };\n\n    return (\n        <div className=\"container h-100 d-flex justify-content-center align-items-start outbox\">\n            <form className=\"panel d-flex flex-column\">\n            <h1>Configue Game</h1>\n            <div className=\"form-group pb-1\">\n                <label htmlFor=\"practice\"><i class=\"fas fa-tooth\"></i> Practice</label>\n                <select name=\"practice\" id=\"practice\" className=\"form-control\">\n                    <option selected>Dental Cleaning</option>\n                    <option>Deep Cleaning</option>\n                    <option>Root Canel</option>\n                    <option>Tooth Extraction</option>\n                </select>\n            </div>\n            <div className=\"form-group pb-1\">\n                <label htmlFor=\"gameType\"><i class=\"fas fa-gamepad\"></i> Mode</label>\n                <div className=\"row px-3\">\n                    <div className=\"form-check col-5\">\n                        <input type=\"radio\" className=\"form-check-input\" name=\"gameType\" id=\"gameType1\" value=\"gameType1\" checked/>\n                        <label htmlFor=\"gameType1\" className=\"form-check-label\"><i class=\"fas fa-stopwatch\"></i> Tick-Tack</label>\n                    </div>\n                    <div className=\"form-check col-5\">\n                        <input type=\"radio\" className=\"form-check-input\" name=\"gameType\" id=\"gameType2\" value=\"gameType2\"/>\n                        <label htmlFor=\"gameType2\" className=\"form-check-label\"><i class=\"fas fa-school\"></i> Free Mode</label>\n                    </div>\n                </div>\n            </div>\n            <div className=\"form-group\">\n                <label htmlFor=\"gameType\"><i class=\"fas fa-hat-wizard\"></i> Level</label>\n                <select name=\"gameType\" id=\"gameType\" className=\"form-control\">\n                    <option>Easy</option>\n                    <option selected>Normal</option>\n                    <option>Hard</option>\n                    <option>Elite</option>\n                </select>\n            </div>\n            <div className=\"form-group form-check\">\n                <input type=\"checkbox\" className=\"form-check-input\" id=\"check\" onChange={handleExtraInfoCheckboxChange}/>\n                <label htmlFor=\"check\" className=\"form-check-label\">Extra Info</label>\n            </div>\n            {\n                infoMenuExpand &&\n                    infoMenu\n            }\n            <Link to=\"/\" role=\"button\" className={`btn btn-primary btn-lg btn-round align-self-start`}>Start Game</Link>\n            </form>\n        </div>\n    );\n}\n\nexport default GameMenu;\n","import React from 'react';\nimport './App.css';\nimport { HashRouter as Router, Switch, Route} from 'react-router-dom';\nimport Main from './Main';\nimport Signin from './Signin';\nimport GameMenu from './GameMenu';\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Switch>\n          <Route exact path=\"/signin\">\n            <Signin />\n          </Route>\n          <Route path=\"/game-menu\">\n            <GameMenu />\n          </Route>\n          <Route path=\"/\">\n            <Main />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}